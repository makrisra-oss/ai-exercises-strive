{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cashier(amount):\n",
    "    dollars_count = amount // 100\n",
    "    quarters_count = (amount - (dollars_count*100)) // 25\n",
    "    dimes_count = (amount - (dollars_count*100) - (quarters_count*25)) // 10\n",
    "    nickels_count = (amount - (dollars_count*100) - (quarters_count*25) - (dimes_count*10)) // 5\n",
    "    pennies_count = (amount - (dollars_count*100) - (quarters_count*25) - (dimes_count*10) - (nickels_count*5)) // 1\n",
    "    return {\n",
    "'dollars' : dollars_count,\n",
    "'quarters' : quarters_count,\n",
    "'dimes' : dimes_count,\n",
    "'nickels' : nickels_count,\n",
    "'pennies' : pennies_count\n",
    "    }\n",
    "\n",
    "cashier(1156)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_grades(grade):\n",
    "    if grade > 8.5 < 10:\n",
    "        print(\"A\")\n",
    "    elif grade > 7.5 < 8:\n",
    "        print(\"B\")\n",
    "    elif grade > 6.5 < 7:\n",
    "        print(\"C\")\n",
    "    elif grade > 5.5 < 6:\n",
    "        print(\"D\")\n",
    "    elif grade < 5.5 > 0:\n",
    "        print(\"F\")\n",
    "    if grade > 10:\n",
    "        raise Exception(\"Grades must be values between 0 and 10.\")\n",
    "    if grade < 0:\n",
    "        raise Exception(\"Grades must be values between 0 and 10.\")\n",
    "convert_grades(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_vowels(text):\n",
    "    \n",
    "    a = \"a\"\n",
    "    A = \"A\"\n",
    "    \n",
    "    a_count = 0\n",
    "    \n",
    "    for a or A in text:\n",
    "        if a or A in text:\n",
    "        a_count = a_count + 1\n",
    "    \n",
    "    e = \"e\"\n",
    "    E = \"E\"\n",
    "    \n",
    "    e_count = 0\n",
    "    \n",
    "    for e or E in text:\n",
    "        if e or E in text:\n",
    "        e_count = e_count + 1\n",
    "        \n",
    "    i = \"i\"\n",
    "    I = \"I\"\n",
    "    \n",
    "    i_count\n",
    "    \n",
    "    for i or I in text:\n",
    "        if i or I in text:\n",
    "        i_count = i_count + 1\n",
    "    \n",
    "    o = \"o\"\n",
    "    O = \"O\"\n",
    "    \n",
    "    for o or O in text:\n",
    "        if o or O in text:\n",
    "        o_count = o_count + 1\n",
    "        \n",
    "    u = \"u\"\n",
    "    U = \"U\"\n",
    "    \n",
    "    for u or U in text:\n",
    "        if u or U in text:\n",
    "        u_count = u_count + 1\n",
    "\n",
    "return {\n",
    "'a' : a_count,\n",
    "'e' : e_count,\n",
    "'i' : i_count,\n",
    "'o' : o_count,\n",
    "'u' : u_count,\n",
    "}\n",
    "\n",
    "count_vowels(\"Michael Palin\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_prime(number):\n",
    "    \n",
    "    if number > 1:\n",
    "        \n",
    "        for i in range(2, number):\n",
    "            \n",
    "            if (num % i) == 0:\n",
    "                bool((num % i) == 0)\n",
    "    \n",
    "is_prime(29)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = \"\"\"How much wood would a woodchuck chuck\n",
    "If a woodchuck could chuck wood?\n",
    "He would chuck, he would, as much as he could,\n",
    "And chuck as much as a woodchuck would\n",
    "If a woodchuck could chuck wood.\"\"\"\n",
    "\n",
    "def count_words(text):\n",
    "\n",
    "\n",
    "\n",
    "    count = dict()\n",
    "    words = text.split()\n",
    "    \n",
    "    for word in words:\n",
    "        if word in count:\n",
    "            count[word] += 1\n",
    "        else:\n",
    "            count [word] = 1\n",
    "    \n",
    "    return count\n",
    "\n",
    "print(count_words(text))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
