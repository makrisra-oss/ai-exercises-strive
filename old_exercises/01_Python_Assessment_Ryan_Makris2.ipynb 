{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dollars': 11, 'quarters': 2, 'dimes': 0, 'nickels': 1, 'pennies': 1}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def cashier(amount):\n",
    "    dollars_count = amount // 100\n",
    "    quarters_count = (amount - (dollars_count*100)) // 25\n",
    "    dimes_count = (amount - (dollars_count*100) - (quarters_count*25)) // 10\n",
    "    nickels_count = (amount - (dollars_count*100) - (quarters_count*25) - (dimes_count*10)) // 5\n",
    "    pennies_count = (amount - (dollars_count*100) - (quarters_count*25) - (dimes_count*10) - (nickels_count*5)) // 1\n",
    "    return {\n",
    "'dollars' : dollars_count,\n",
    "'quarters' : quarters_count,\n",
    "'dimes' : dimes_count,\n",
    "'nickels' : nickels_count,\n",
    "'pennies' : pennies_count\n",
    "    }\n",
    "\n",
    "cashier(1156)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F\n"
     ]
    },
    {
     "ename": "Exception",
     "evalue": "Grades must be values between 0 and 10.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-39c4f1115f77>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrade\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Grades must be values between 0 and 10.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mconvert_grades\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-2-39c4f1115f77>\u001b[0m in \u001b[0;36mconvert_grades\u001b[0;34m(grade)\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Grades must be values between 0 and 10.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mgrade\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Grades must be values between 0 and 10.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mconvert_grades\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mException\u001b[0m: Grades must be values between 0 and 10."
     ]
    }
   ],
   "source": [
    "def convert_grades(grade):\n",
    "    if grade > 8.5 < 10:\n",
    "        print(\"A\")\n",
    "    elif grade > 7.5 < 8:\n",
    "        print(\"B\")\n",
    "    elif grade > 6.5 < 7:\n",
    "        print(\"C\")\n",
    "    elif grade > 5.5 < 6:\n",
    "        print(\"D\")\n",
    "    elif grade < 5.5 > 0:\n",
    "        print(\"F\")\n",
    "    if grade > 10:\n",
    "        raise Exception(\"Grades must be values between 0 and 10.\")\n",
    "    if grade < 0:\n",
    "        raise Exception(\"Grades must be values between 0 and 10.\")\n",
    "convert_grades(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-3-082a4424f680>, line 8)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-082a4424f680>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    for a or A in text:\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def count_vowels(text):\n",
    "    \n",
    "    a = \"a\"\n",
    "    A = \"A\"\n",
    "    \n",
    "    a_count = 0\n",
    "    \n",
    "    for a or A in text:\n",
    "        if a or A in text:\n",
    "        a_count = a_count + 1\n",
    "    \n",
    "    e = \"e\"\n",
    "    E = \"E\"\n",
    "    \n",
    "    e_count = 0\n",
    "    \n",
    "    for e or E in text:\n",
    "        if e or E in text:\n",
    "        e_count = e_count + 1\n",
    "        \n",
    "    i = \"i\"\n",
    "    I = \"I\"\n",
    "    \n",
    "    i_count\n",
    "    \n",
    "    for i or I in text:\n",
    "        if i or I in text:\n",
    "        i_count = i_count + 1\n",
    "    \n",
    "    o = \"o\"\n",
    "    O = \"O\"\n",
    "    \n",
    "    for o or O in text:\n",
    "        if o or O in text:\n",
    "        o_count = o_count + 1\n",
    "        \n",
    "    u = \"u\"\n",
    "    U = \"U\"\n",
    "    \n",
    "    for u or U in text:\n",
    "        if u or U in text:\n",
    "        u_count = u_count + 1\n",
    "\n",
    "return {\n",
    "'a' : a_count,\n",
    "'e' : e_count,\n",
    "'i' : i_count,\n",
    "'o' : o_count,\n",
    "'u' : u_count,\n",
    "}\n",
    "\n",
    "count_vowels(\"Michael Palin\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def is_prime(number):\n",
    "    \n",
    "    if number > 1:\n",
    "        \n",
    "        for i in range(2, number):\n",
    "            \n",
    "            if (number % i) == 0:\n",
    "                bool((number % i) == 0)\n",
    "    \n",
    "is_prime(29)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'How': 1, 'much': 3, 'wood': 1, 'would': 3, 'a': 4, 'woodchuck': 4, 'chuck': 4, 'If': 2, 'could': 2, 'wood?': 1, 'He': 1, 'chuck,': 1, 'he': 2, 'would,': 1, 'as': 4, 'could,': 1, 'And': 1, 'wood.': 1}\n"
     ]
    }
   ],
   "source": [
    "text = \"\"\"How much wood would a woodchuck chuck\n",
    "If a woodchuck could chuck wood?\n",
    "He would chuck, he would, as much as he could,\n",
    "And chuck as much as a woodchuck would\n",
    "If a woodchuck could chuck wood.\"\"\"\n",
    "\n",
    "def count_words(text):\n",
    "\n",
    "\n",
    "\n",
    "    count = dict()\n",
    "    words = text.split()\n",
    "    \n",
    "    for word in words:\n",
    "        if word in count:\n",
    "            count[word] += 1\n",
    "        else:\n",
    "            count [word] = 1\n",
    "    \n",
    "    return count\n",
    "\n",
    "print(count_words(text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
